
require("dotenv").config();

const fs = require("fs");
const express = require("express");
const fetch = require('node-fetch');
const request = require('request');
const app = express();
const PORT = process.env.PORT || 5000;

// temporally fix cancellation of promises https://github.com/yagop/node-telegram-bot-api/issues/319. module.js:652:30
process.env.NTBA_FIX_319 = 1;
// temporally fix https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files
process.env.NTBA_FIX_350 = 1;

const TelegramBot = require('node-telegram-bot-api');

let TOKEN = process.env.TOKEN || "";
const PROXY = process.env.PROXY || ""; // https://hidemyna.me/ru/proxy-list/?type=s#list

// https://github.com/yagop/node-telegram-bot-api/blob/master/examples/polling.js

const bot = new TelegramBot(TOKEN, {
    polling: true,
    request: {
        proxy: PROXY
    },
});


app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get("/", (req, res) => {
    // res.send("GET request to the homepage");
    res.status(200).end();
});

// POST method route
// app.post(`/bot${TOKEN}`, (req, res) => {
//     bot.processUpdate(req.body);
//     // res.status(200).end();
//     res.sendStatus(200);
// });

app.use((req, res, next) => {
    res.status(404).send("Not found!");
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send("Something broke!");
});

app.listen(PORT, () => console.log("Server start"));


// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ node-telegram-bot-api –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏, –±—É—Ñ—Ñ–µ—Ä–æ–º, —É—Ä–ª–æ–º https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞ —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ request –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º `const file = request(url);` –∏ –¥–∞–ª—å—à–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –±–æ—Ç—É, –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ node-fetch –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±—É—Ñ—Ñ–µ—Ä–æ–º, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ—Ñ–µ—Ä, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–æ–≤–∞—Ç—å –±–æ—Ç—É ( –ø–æ–º–æ–µ–º—É –æ–Ω–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏, –Ω–æ –Ω–µ —Ç–∞–∫ –æ—á–µ–≤–∏–¥–Ω–æ –∫–∞–∫ request ), –≤ –æ–±—â–µ–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –∏ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç


bot.onText(/\/start/, (msg) => {
    const opts = {
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                ["/menu", "/help"],
            ]
        })
    };
    bot.sendMessage(msg.chat.id, "Welcome", opts);
});

bot.onText(/\/menu/, (msg) => {
    const chatId = msg.chat.id;
    const opts = {
        reply_to_message_id: msg.message_id,
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã" }],
                [{ text: "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É" }, { text: "–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ" }], // –º–æ–∂–Ω–æ —Ç–∞–∫
                ["–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è", "–ü–æ–≥–æ–¥–∞"], // –∏–ª–∏ —Ç–∞–∫
            ]
        })
    };
    bot.sendMessage(chatId, '–ú–µ–Ω—é –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏?', opts);
});

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const opts = {
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                ["/menu"],
            ]
        })
    };
    bot.sendMessage(chatId, '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –º–µ–Ω—é!', opts);
});


// Listen for any kind of message. There are different kinds of messages.
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);

    // —Å–æ–±—ã—Ç–∏–µ "message" —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events , –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è "message" —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å `if (msg.text)`, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–∞–¥–∞—Ç—å –æ—à–∏–±–∫–∞, –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∏–ø–æ–º —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –ø–æ–ª—è "text", –Ω–∞–ø—Ä–∏–º–µ—Ä "Contact"
    if (msg.text) {
        let swear_words = ["—Ö—É–π", "–ª–æ—Ö", "—á–º–æ"]; // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
        let message = msg.text.toString().toLowerCase();
        swear_words.some(sw_word => {
            if (message.includes(sw_word)) {
                let messageId = msg.message_id;
                let name = msg.from.first_name;
                // —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –Ω–µ–ª—å–∑—è, —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã https://t.me/botoid/401183 , —Ç–æ–µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª –∏ —Ç–∞–º –æ–Ω —Å–º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º–∞—Ç
                if (msg.chat.type !== "private") {
                    // bot.deleteMessage(chatId, messageId); // https://github.com/yagop/node-telegram-bot-api/issues/653#issuecomment-424701973
                    setTimeout(() => { bot.deleteMessage(msg.chat.id, msg.message_id); }, 1500); // –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

                }
                bot.sendMessage(chatId, `${name} –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å!`);
                return true; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ some, –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤ 
            }
        });
    }

    bot.sendMessage(chatId, "–Ø –∫–ª—ë–≤—ã–π –±–æ—Ç");
});


bot.on("text", (msg) => {
    // console.log('msg :', msg);
    const chatId = msg.chat.id;

    let hello = "–ø—Ä–∏–≤–µ—Ç";
    if (msg.text.toString().toLowerCase().indexOf(hello) === 0) { // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç" –∏–¥—ë—Ç –ø–µ—Ä–≤—ã–º
        let name = msg.from.first_name;
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name}`);
    }

    let bye = "–ø–æ–∫–∞";
    if (msg.text.toString().toLowerCase().includes(bye)) { // –µ—Å–ª–∏ —Ñ—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–ø–æ–∫–∞" –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
        let name = msg.from.first_name;
        bot.sendMessage(chatId, `–ù–∞–¥–µ—é—Å—å –µ—â—ë —É–≤–∏–¥–∏–º—Å—è, –ø–æ–∫–∞ ${name}`);
    }

    let location = "location";
    if (msg.text.toString().toLowerCase().indexOf(location) === 0) {
        bot.sendLocation(msg.chat.id, 59.127406, 37.906920);
        bot.sendMessage(msg.chat.id, "Here is the Cherepovets");

    }

    let google = "google";
    if (msg.text.toString().toLowerCase().includes(google)) {
        const opts = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: "ùëÆ Google", url: "http://google.com" },
                        { text: "–ú–æ–∂–µ—Ç ùò† –Ø–Ω–¥–µ–∫—Å?", url: "http://ya.ru" }
                    ],
                ]
            })
        };

        bot.sendMessage(chatId, "–ö—Ç–æ —Å–∫–∞–∑–∞–ª Google?", opts);
    }
});

bot.onText(/\/inline/, (msg) => {
    const chatId = msg.chat.id;
    var opts = {
        reply_markup: {
            inline_keyboard: [
                [{ text: "–ö–Ω–æ–ø–∫–∞", callback_data: "–∫–Ω–æ–ø–∫–∞" }],
                [{ text: "1", callback_data: "1" }, { text: "2", callback_data: "2" }, { text: "3", callback_data: "3" }],
                [{ text: "4", callback_data: "4" }, { text: "5", callback_data: "5" }]
            ]
        }

    };
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", opts);
});

bot.on("callback_query", (callbackQuery) => {
    // const chatId = callbackQuery.message.chat.id;
    const callback_query_id = callbackQuery.id; // —ç—Ç–æ –≤–∞–∂–Ω–æ!! –¥–ª—è .answerCallbackQuery() –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ callback_query_id, –∞ –Ω–µ chatId
    console.log("callbackQuery", callbackQuery);
    let data = callbackQuery.data;
    // –ß–∏—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    if (data === "–∫–Ω–æ–ø–∫–∞") {
        const opts = {
            text: "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
            // show_alert: true,
        };
        bot.answerCallbackQuery(callback_query_id, opts);
    } else {
        console.log('–ù–∞–∂–∞–ª–∏ :', data);
        const opts = {
            text: `–í—ã –Ω–∞–∂–∞–ª–∏ ${data}`,
            // show_alert: true,
        };
        bot.answerCallbackQuery(callback_query_id, opts);
    }

    // bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç –∏–∑ callback_query");
});

bot.onText(/–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É/, (msg) => {
    const chatId = msg.chat.id;
    const opts = {
        reply_to_message_id: msg.message_id,
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    { text: "–° —Å–æ–±–∞—á–∫–æ–π" },
                    { text: "–° –∫–æ—Ç–∏–∫–æ–º" },
                    { text: "–° –º–∏—à–∫–æ–π" }
                ],
                ["/menu"]
            ]
        })
    };
    bot.sendMessage(chatId, '–ö–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–µ–º?', opts);
});

bot.onText(/–° —Å–æ–±–∞—á–∫–æ–π/, async (msg) => {
    const chatId = msg.chat.id;

    // –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª

    // const url = "http://infobreed.ru/foto_breed/126/pincher3.jpg";
    // bot.sendPhoto(chatId, url, {
    //     caption: "–í–æ—Ç —Å–æ–±–∞—á–∫–∞!"
    // });

    // node-fetch and convert to buffer

    // fetch('http://infobreed.ru/foto_breed/126/pincher3.jpg')
    //     .then((response) => response.buffer())
    //     .then((buffer) => {
    //         console.log('data :', buffer);
    //         bot.sendPhoto(chatId, buffer, {
    //             caption: "–í–æ—Ç —Å–æ–±–∞—á–∫–∞!"
    //         });
    //     })
    //     .catch((error) => console.log('error: ', error));

    // node-fetch and convert to buffer (async/await)

    // try {
    //     let response = await fetch('http://infobreed.ru/foto_breed/126/pincher3.jpg');
    //     let buffer = await response.buffer();
    //     bot.sendPhoto(chatId, buffer, {
    //         caption: "–í–æ—Ç —Å–æ–±–∞—á–∫–∞!"
    //     });
    // } catch (error) {
    //     console.log('error: ', error);
    // }

    // request (works by default with streams)

    const url = 'http://infobreed.ru/foto_breed/126/pincher3.jpg';
    const photo = request(url);
    // bot.sendPhoto(chatId, photo); // send just photo, without caption
    bot.sendPhoto(chatId, photo, { // send as image
        caption: "–í–æ—Ç —Å–æ–±–∞—á–∫–∞!"
    });
});

bot.onText(/–° –∫–æ—Ç–∏–∫–æ–º/, (msg) => {
    const chatId = msg.chat.id;
    const photo = "http://oboi.cc/1440-900-100-uploads/new/big/oboik.ru_8187.jpg";
    bot.sendPhoto(chatId, photo, {
        caption: "–í–æ—Ç –∫–æ—Ç–∏–∫!"
    });
});

bot.onText(/–° –º–∏—à–∫–æ–π/, (msg) => {
    const chatId = msg.chat.id;
    const photo = "http://price-top.ru/public/images/products/309/59/58558/641ffab083.jpg";
    bot.sendPhoto(chatId, photo, {
        caption: "–í–æ—Ç –º–∏—à–∫–∞!"
    });
});

bot.onText(/–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è/, (msg) => {
    const chatId = msg.chat.id;
    let time = new Date().toLocaleString([], { hour: "2-digit", minute: "2-digit", second: "2-digit" });
    bot.sendMessage(chatId, time);
});

bot.onText(/–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ/, (msg) => {
    // From HTTP request
    const url = 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Example.ogg';
    const audio = request(url);
    bot.sendAudio(msg.chat.id, audio);
});

bot.onText(/–ü–æ–≥–æ–¥–∞/, (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);
    const opts = {
        reply_to_message_id: msg.message_id,
        "reply_markup": {
            "remove_keyboard": true
        }
    };
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", opts);

    const regexp2 = /.+/;
    bot.onText(regexp2, (msg, match) => {
        console.log('match :', match);

        // https://openweathermap.org
        // forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é, weather - –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å
        // http://api.openweathermap.org/data/2.5/forecast?id=524901&APPID={APIKEY} // –ø–æ id –≥–æ—Ä–æ–¥–∞ 
        // http://api.openweathermap.org/data/2.5/weather?q=London&APPID={APIKEY} // –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

        // let city = "–ú–æ—Å–∫–≤–∞";
        // let city = "Moscow";
        // let city = "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü";
        let city = match;
        let unit = "metric";
        let lang = "ru";
        let urlWeatherAPI = "http://api.openweathermap.org/data/2.5/weather?q=";
        const APIKEYOWM = process.env.APIKEYOWM || "";
        let requestUrl = `${urlWeatherAPI}${city}&APPID=${APIKEYOWM}&units=${unit}&lang=${lang}`;
        // –≤ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å URL —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        // error:  TypeError [ERR_UNESCAPED_CHARACTERS]: Request path contains unescaped characters
        // https://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent
        let finalUrl = encodeURI(requestUrl);
        // console.log('requestUrl :', requestUrl);
        // console.log('finalUrl :', finalUrl);
        fetch(finalUrl)
            .then((response) => response.json())
            .then((response) => {
                // console.log('response :', response);
                if (response.cod === 200) {
                    let city_name = response.name;
                    let temp = response.main.temp;
                    let description = response.weather[0].description;
                    let grad = "\xB0"; // &deg; ¬∞
                    let message = `–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ ${city_name} ${temp}${grad}C –∏ ${description}.`;
                    // console.log('message :', message);
                    const opts = {
                        "reply_markup": {
                            keyboard: [
                                ["/menu"]
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    };
                    bot.sendMessage(chatId, message, opts);
                } else if (response.cod === 429) {
                    console.log('response 429 :', response);
                    // "Your account is temporary blocked due to exceeding of requests limitation of your subscription type. 
                    const opts = {
                        "reply_markup": {
                            keyboard: [
                                ["/menu"]
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    };
                    bot.sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", opts);
                } else {
                    console.log('response else :', response);
                    let message = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –∏–ª–∏ —è–∑—ã–∫ –≤–≤–æ–¥–∞";
                    const opts = {
                        "reply_markup": {
                            keyboard: [
                                ["/menu"]
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    };
                    bot.sendMessage(chatId, message, opts);
                }
            })
            .catch((error) => console.log('error: ', error));


        bot.removeTextListener(regexp2);
    });

});

// https://core.telegram.org/bots/api#keyboardbutton
bot.onText(/–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã/, (msg) => {
    const opts = {
        reply_to_message_id: msg.message_id,
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact: true }, { text: "–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }],
                ["/menu"]
            ]
        })
    };
    bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", opts);
});

bot.on("contact", (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);

    // –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —é–∑–µ—Ä–∞ –∏ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–∑—É –Ω–∞–ø—Ä–∏–º–µ—Ä
    // –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å—Ä–∞–∑—É —Ü–µ–ª—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
    let user_info = msg.contact;
    // let phone = msg.contact.phone_number;
    console.log('user_info: ', user_info);


    const opts = {
        reply_to_message_id: msg.message_id
    };

    bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω, –ª–æ–≤–∏—Ç–µ –∏ –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.", opts);

    let phoneNumber = "+7 987 654 32 11"
    let firstName = "Mr.Bot"
    bot.sendContact(chatId, phoneNumber, firstName, opts)
});

bot.on('location', (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);
    let location = msg.location;
    console.log("location: ", location);

    const opts = {
        reply_to_message_id: msg.message_id
    };
    bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!", opts);
});

bot.on("sticker", (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);
    const opts = {
        reply_to_message_id: msg.message_id
    };
    // bot.sendMessage(chatId, "–Ø –ª—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã!", opts);
    // bot.sendSticker(chatId, "CAADAgADMgoAAm4y2AAB_W-265DwO00C", opts); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º id

    // –∏–ª–∏ –≤–æ—Ç —Ç–∞–∫, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤
    // bot.getStickerSet("ci_cat")
    //     .then(stickers => console.log('stickers :', stickers));


    // –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
    // —Ü–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤ –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã —à–ª–∏ –æ–¥–∏–Ω –ø–æ—Å–ª–µ –¥—Ä—É–≥–æ–≥–æ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –∫–∞–∫ –ø–æ–ø–∞–ª–æ
    bot.sendMessage(chatId, "–Ø –ª—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã!", opts)
        .then(_ => { // –Ω–µ–≤–∞–∂–Ω–æ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –Ω–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ telegram

            const stickerPacks = ["ci_cat", "GoodBoyResistance", "podslushano"]; // –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
            let stickerPack = stickerPacks[Math.floor(Math.random() * stickerPacks.length)];
            // console.log('stickerPack :', stickerPack);

            bot.getStickerSet(stickerPack)
                .then(stickersSet => {
                    // console.log('stickersSet :', stickersSet);
                    let stickers = stickersSet.stickers; // –±–µ—Ä—ë–º –º–∞—Å—Å–∏–≤ —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
                    let packLength = stickers.length; // –µ–≥–æ –¥–ª–∏–Ω–∞
                    let stickerItem = stickers[Math.floor(Math.random() * packLength)]; // —Ä–µ–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä-–æ–±—ä–µ–∫—Ç –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                    let stickerId = stickerItem.file_id; // –µ–≥–æ id-name
                    bot.sendSticker(chatId, stickerId);
                });
        });
});

// How to get the response of the keyboard selection or user input
// https://github.com/yagop/node-telegram-bot-api/issues/108#issuecomment-218765423
// https://github.com/yagop/node-telegram-bot-api/issues/356#issuecomment-311276792
// –µ—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–æ –º–æ–∂–Ω–æ –∏ –Ω–µ –≤—ã–Ω–æ—Å–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –≤—ã—à–µ
const regexp1 = /^\/selectseries/;
bot.onText(regexp1, (msg, match) => {
    bot.sendMessage(msg.chat.id, "Select a serie", {
        "reply_markup": {
            "keyboard": [
                [{ text: "–î–∞" }, { text: "–ù–µ—Ç" }]
            ],
            one_time_keyboard: true,
            resize_keyboard: true
        }
    });

    const regexp2 = /.+/; // –≤–∞–∂–Ω–æ!! —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å regexp –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –±—ã–ª–∞ –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    bot.onText(regexp2, (msg, match) => {
        bot.sendMessage(msg.chat.id, "You selected " + match, {
            "reply_markup": {
                // "remove_keyboard": true // —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º [–î–∞-–ù–µ—Ç] –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
                keyboard: [
                    ["/menu"]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
        console.log('match :', match);
        bot.removeTextListener(regexp2); // —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    });
});




bot.on('polling_error', (error) => {
    console.log("=== polling_error ===");
    console.log(error);
});

// error handling
process.on("uncaughtException", (error) => {
    let time = new Date();
    console.log("=== uncaughtException ===");
    console.log("TIME:", time);
    console.log("NODE_CODE:", error.code);
    console.log("MSG:", error.message);
    console.log("STACK:", error.stack);
});

process.on("unhandledRejection", (error) => {
    let time = new Date();
    console.log("=== unhandledRejection ===");
    console.log("TIME:", time);
    console.log("NODE_CODE:", error.code);
    console.log("MSG:", error.message);
    console.log("STACK:", error.stack);
});

