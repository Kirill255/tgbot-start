// –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–∞ —Ö–µ—Ä–æ–∫—É –Ω—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —É–¥–∞–ª—è—Ç—å dotenv –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π(dependencies) –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É, –∏–Ω—á–∞–µ –±—É–¥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å dotenv –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ —Ö–µ—Ä–æ–∫—É —Å–µ—Ä–≤–µ—Ä–µ dotenv(–∏–ª–∏ —á—Ç–æ —Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —á—Ç–µ–Ω–∏—è env –∫–æ–Ω—Ñ–∏–≥–∞), –Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–Ω –Ω–∞–º –Ω—É–∂–µ–Ω
// upd: —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ —É–¥–∞–ª—è—Ç—å/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–∞–∫–µ—Ç dotenv, —É—Å—Ç–∞–Ω–æ–≤–∏–ª –µ–≥–æ –≤ devDependencies, —Ç–∞–∫ –∫–∞–∫ —Ö–µ—Ä–æ–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
// require("dotenv").config(); // –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ heroku –µ—Å—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç—É–¥–∞

const express = require("express");
const app = express();
const fetch = require("node-fetch");
const PORT = process.env.PORT || 5000;

// —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞, –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ node-telegram-bot-api, —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ –Ω—É–∂–Ω–æ
process.env.NTBA_FIX_319 = 1;   // fix cancellation of promises https://github.com/yagop/node-telegram-bot-api/issues/319. module.js:652:30
// temporally fix https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files
process.env.NTBA_FIX_350 = 1;

const TelegramBot = require('node-telegram-bot-api');

let TOKEN = process.env.TOKEN || "";
const url = `https://${process.env.HEROKU_APP_NAME}.herokuapp.com`;

// –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ WebHook
const bot = new TelegramBot(TOKEN);

bot.setWebHook(`${url}/bot${TOKEN}`, {});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get("/", (req, res) => {
    // res.send("GET request to the homepage");
    res.status(200).end();
});

// POST method route
app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    // res.status(200).end();
    res.sendStatus(200);
});

app.use((req, res, next) => {
    res.status(404).send("Not found!");
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send("Something broke!");
});

app.listen(PORT, () => console.log("Server start"));


// Listen for any kind of message. There are different kinds of messages.
bot.on("message", (msg) => {
    const chatId = msg.chat.id;

    if (msg.text) {
        let swear_words = ["—Ö—É–π", "–ª–æ—Ö", "—á–º–æ"]; // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
        let message = msg.text.toString().toLowerCase();
        swear_words.some(sw_word => {
            if (message.includes(sw_word)) {
                let messageId = msg.message_id;
                let name = msg.from.first_name;

                if (msg.chat.type !== "private") {

                    setTimeout(() => { bot.deleteMessage(chatId, messageId); }, 1500); // –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

                }
                bot.sendMessage(chatId, `${name} –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å!`);
                return true; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ some, –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤ 
            }
        });
    }

});

bot.onText(/\/start/i, (msg) => {
    const chatId = msg.chat.id;
    const opts = {
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                ["/menu"],
            ]
        })
    };
    bot.sendMessage(chatId, "Welcome", opts);
});

bot.onText(/\/menu/i, (msg) => {
    const chatId = msg.chat.id;
    const opts = {
        reply_to_message_id: msg.message_id,
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                ["–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞", "–ü–æ–≥–æ–¥–∞"],
                ["–ö—É—Ä—Å –≤–∞–ª—é—Ç"]
            ]
        })
    };
    bot.sendMessage(chatId, '–ú–µ–Ω—é –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏?', opts);
});

bot.on("text", (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);

    let hello = "–ø—Ä–∏–≤–µ—Ç";
    if (msg.text.toString().toLowerCase().indexOf(hello) === 0) { // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç" –∏–¥—ë—Ç –ø–µ—Ä–≤—ã–º
        let name = msg.from.first_name;
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name}`);
    }

    let bye = "–ø–æ–∫–∞";
    if (msg.text.toString().toLowerCase().includes(bye)) { // –µ—Å–ª–∏ —Ñ—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–ø–æ–∫–∞" –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
        let name = msg.from.first_name;
        bot.sendMessage(chatId, `–ù–∞–¥–µ—é—Å—å –µ—â—ë —É–≤–∏–¥–∏–º—Å—è, –ø–æ–∫–∞ ${name}`);
    }

    let google = "google";
    if (msg.text.toString().toLowerCase().includes(google)) {
        const opts = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: "ùëÆ Google", url: "http://google.com" },
                        { text: "–ú–æ–∂–µ—Ç ùò† –Ø–Ω–¥–µ–∫—Å?", url: "http://ya.ru" }
                    ],
                ]
            })
        };
        bot.sendMessage(chatId, "–ö—Ç–æ —Å–∫–∞–∑–∞–ª Google?", opts);
    }
});

bot.onText(/–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞/, (msg) => {
    const chatId = msg.chat.id;
    let time = (new Date()).toLocaleTimeString();
    bot.sendMessage(chatId, time);
});

bot.onText(/–ü–æ–≥–æ–¥–∞/, (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);
    const opts = {
        reply_to_message_id: msg.message_id,
        "reply_markup": JSON.stringify({
            "remove_keyboard": true
        })
    };
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", opts);

    const regexp2 = /.+/; // —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ regexp
    bot.onText(regexp2, async (msg, match) => { // async
        console.log('match :', match);
        // console.log('match[0] :', match[0]);

        let city = match;
        let unit = "metric";
        let lang = "ru";
        let urlWeatherAPI = "http://api.openweathermap.org/data/2.5/weather?q=";
        const APIKEYOWM = process.env.APIKEYOWM || "";
        let requestUrl = `${urlWeatherAPI}${city}&APPID=${APIKEYOWM}&units=${unit}&lang=${lang}`;

        let finalUrl = encodeURI(requestUrl);
        // console.log('requestUrl :', requestUrl);
        // console.log('finalUrl :', finalUrl);

        const opts = {
            "reply_markup": JSON.stringify({
                keyboard: [
                    ["/menu"]
                ],
                resize_keyboard: true
            })
        };

        try {
            let data = await fetch(finalUrl);
            let response = await data.json();
            // console.log('response :', response);

            if (response.cod === 200) {
                let city_name = response.name;
                let temp = response.main.temp;
                let description = response.weather[0].description;
                let grad = "\xB0"; // &deg; ¬∞
                let message = `–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ ${city_name} ${temp}${grad}C –∏ ${description}.`;
                // console.log('message :', message);

                bot.sendMessage(chatId, message, opts);
            } else if (response.cod === 429) {
                console.log('response 429 :', response);
                // code 429 - "Your account is temporary blocked due to exceeding of requests limitation of your subscription type. 

                bot.sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", opts);
            } else {
                console.log("response else: ", response);

                bot.sendMessage(chatId, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –∏–ª–∏ —è–∑—ã–∫ –≤–≤–æ–¥–∞", opts);
            }
        } catch (error) {
            console.log("error: ", error);
        }

        bot.removeTextListener(regexp2); // —É–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –ø–æ regexp —Å—Å—ã–ª–∫–µ
    });

});

bot.onText(/–ö—É—Ä—Å –≤–∞–ª—é—Ç/, (msg) => {
    let { id } = msg.chat;
    bot.sendMessage(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "–î–æ–ª–ª–∞—Ä", callback_data: "USD" }, { text: "–ï–≤—Ä–æ", callback_data: "EUR" }],
            ]
        }
    })
});

bot.on("callback_query", async (query) => {
    const { id } = query.message.chat;
    const { data } = query;
    bot.answerCallbackQuery(query.id, {
        text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}`
    });

    let base = data; // USD/EUR
    let symbols = "RUB"; // RUB
    let pair = `${base}_${symbols}`; // USD_RUB or EUR_RUB

    // https://free.currencyconverterapi.com/api/v6/convert?q=USD_RUB&compact=y
    // https://free.currencyconverterapi.com/api/v6/convert?q=EUR_RUB&compact=y

    let url = "https://free.currencyconverterapi.com/api/v6/convert"
    // let finalUrl = `${url}?q=${base}_${symbols}&compact=y`;
    let finalUrl = `${url}?q=${pair}&compact=y`;
    try {
        let data = await fetch(finalUrl);
        let response = await data.json();
        // console.log('response :', response);
        let val = response[pair].val;

        let html = `–ö—É—Ä—Å <em>${pair}:</em>\n<b>1</b> ${base} ‚Äî <b>${val}</b> ${symbols}.`;
        bot.sendMessage(id, html, {
            parse_mode: "HTML"
        });

    } catch (error) {
        console.log("error: ", error);
        bot.sendMessage(id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }

});

bot.on("sticker", (msg) => {
    const chatId = msg.chat.id;
    // console.log('msg :', msg);
    const opts = {
        reply_to_message_id: msg.message_id
    };

    bot.sendMessage(chatId, "–Ø –ª—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã!", opts)
        .then(_ => {

            const stickerPacks = ["ci_cat", "GoodBoyResistance", "podslushano"]; // –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
            let stickerPack = stickerPacks[Math.floor(Math.random() * stickerPacks.length)];
            // console.log('stickerPack :', stickerPack);

            bot.getStickerSet(stickerPack)
                .then(stickersSet => {
                    // console.log('stickersSet :', stickersSet);
                    let stickers = stickersSet.stickers;
                    let stickerItem = stickers[Math.floor(Math.random() * stickers.length)];
                    let stickerId = stickerItem.file_id;
                    bot.sendSticker(chatId, stickerId);
                });
        });
});


// error handling
process.on("uncaughtException", (error) => {
    let time = new Date();
    console.log("=== uncaughtException ===");
    console.log("TIME:", time);
    console.log("NODE_CODE:", error.code);
    console.log("MSG:", error.message);
    console.log("STACK:", error.stack);
});

process.on("unhandledRejection", (error) => {
    let time = new Date();
    console.log("=== unhandledRejection ===");
    console.log("TIME:", time);
    console.log("NODE_CODE:", error.code);
    console.log("MSG:", error.message);
    console.log("STACK:", error.stack);
});